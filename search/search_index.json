{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ansibleee-operator","text":"<p>An operator to deploy and run an Ansible Execution Environment container on Openshit</p>"},{"location":"#build-and-deploy","title":"Build and deploy","text":"<p>It uses operator-sdk to build and run.</p> <p>To build and push to a docker repository <pre><code>make docker-build docker-push IMG=\"&lt;your image name&gt;\"\n</code></pre></p> <p>To deploy in to the cluster <pre><code>make deploy IMG=\"&lt;your image name&gt;\"\n</code></pre></p> <p>To undeploy it from the cluster <pre><code>make undeploy\n</code></pre></p>"},{"location":"#use","title":"Use","text":"<p>Once the operator has been deployed succesfully to the openshift/kubernetes cluster, you can see it in action by creating a new \"ansibleee\" CR. </p> <p>There are some examples on the examples directory.</p> <p>The first one is ansibleee-playbook-local.yaml. This wil execute locally the playbook \"test.yaml\", which will run some checks on the container where ansible-runner is being executed. <pre><code>oc apply -f examples/ansibleee-playbook-local.yaml\n</code></pre></p> <p>There are other examples that also execute locally the playbook \"test.yaml\", but that serve as extraMounts demonstration: ansibleee-extravolumes.yaml and ansibleee-extravolumes_2_secret.yaml that need the secrets ceph-secret-example.yaml and ceph-secret-example2.yaml created: <pre><code>oc apply -f ceph-secret-example.yaml\noc apply -f ceph-secret-example2.yaml\noc apply -f examples/ansibleee-extravolumes.yaml\n</code></pre></p> <p>There are also a number of examples that feature remote execution. By default, all of them expect a compute node to be available in 10.0.0.4, adjust the inventory accordingly for your environment. This setup is compatible with the libvirt development environment deployment described in libvirt_podified_standalone.</p> <p>The first remote example is ansibleee-playbook.yaml. This runs one of the standalone playbooks that is included in the default image.</p> <p>To access an external node, you need to provide the ssh private key so ansible can connect to the node. This is being expected to be provided by a \"ssh-key-secret\" Secret with this format: <pre><code>apiVersion: v1\nkind: Secret\nmetadata:\n  name: ssh-key-secret\n  namespace: openstack\ndata:\n  ssh-privatekey:  3390 bytes                                                                                       \u2502\n\u2502 ssh-publickey:   750 bytes\n</code></pre></p> <p>Once the key has been created, the CR should run the deploy-tripleo-os-configure.yml playbook on the external node: <pre><code>oc apply -f examples/ansibleee-playbook.yaml\n</code></pre></p> <p>The second remote example is ansibleee-role.yaml, which will run a certain number of tasks from specific standalone roles: <pre><code>oc apply -f examples/ansibleee-role.yaml\n</code></pre></p> <p>And the last remote example is ansibleee-play.yaml, which will run a CR-defined playbook using an inventory stored in a ConfigMap. <pre><code>oc apply -f examples/inventory-configmap.yaml\noc apply -f examples/ansibleee-play.yaml\n</code></pre></p>"},{"location":"#example-development-cycle","title":"Example Development Cycle","text":"<p>The following has been verified on openshift-local.</p> <p>The Makefile assumes you have docker installed. If you're using podman, then adjust accordingly (e.g. symlink docker to podman).</p> <p>Create the CRD managed by the operator. This must be deleted and re-created any time the api changes. <pre><code>oc create -f config/crd/bases/redhat.com_ansibleees.yaml\n</code></pre> Build and run a local copy of the Ansible Execution Environment operator. <pre><code>make generate\nmake manifests\nmake build\n./bin/manager\n</code></pre> Once the operator is running, create the examle CR to run the test playbook. <pre><code>oc create -f examples/ansibleee-playbook-local.yaml\n</code></pre> The operator will create a ansible pod and run the playbook. It will then move to a completed state. <pre><code>$ oc get pods | grep ansible\nansibleee-playbook-local-q4pt9         0/1     Completed   0          24m\n$\n</code></pre> To see the result of the playbook run, use <code>oc logs</code>. <pre><code>oc logs $(oc get pods | grep ansible | awk {'print $1'})\n</code></pre></p>"},{"location":"#using-ansibleee-operator-with-tripleo-ansible","title":"Using ansibleee-operator with TripleO Ansible","text":"<p>When the ansibleee-operator spawns a job the ansible-runner can use playbooks and roles contained in its image.</p> <p>An openstack-tripleo-ansible-ee operator image is hosted at quay.io/tripleomastercentos9/openstack-tripleo-ansible-ee which contains tripleo-ansible. The following commands may be used to inspect the content. <pre><code>podman pull quay.io/tripleomastercentos9/openstack-tripleo-ansible-ee\nIMAGE_ID=$(podman images --filter reference=openstack-tripleo-ansible-ee --format \"{{.Id}}\")\npodman run $IMAGE_ID ls -l\n</code></pre> The container is built with TCIB using a tripleo-ansible-ee.yaml file hosted in tripleo-common. When a patch is merged in tripleo-ansible a new version of the openstack-tripleo-ansible-ee image is built by the CI system within minutes.</p>"},{"location":"ansibleee/","title":"AnsibleEE","text":""},{"location":"ansibleee/#custom-resources","title":"Custom Resources","text":"<ul> <li>AnsibleEE</li> </ul>"},{"location":"ansibleee/#sub-resources","title":"Sub Resources","text":"<ul> <li>AnsibleEEList</li> <li>AnsibleEESpec</li> <li>AnsibleEEStatus</li> <li>Config</li> <li>ImportRole</li> <li>Role</li> <li>Task</li> </ul>"},{"location":"ansibleee/#ansibleee","title":"AnsibleEE","text":"<p>AnsibleEE is the Schema for the ansibleees API</p> Field Description Scheme Required metadata metav1.ObjectMeta false spec AnsibleEESpec false status AnsibleEEStatus false <p>Back to Custom Resources</p>"},{"location":"ansibleee/#ansibleeelist","title":"AnsibleEEList","text":"<p>AnsibleEEList contains a list of AnsibleEE</p> Field Description Scheme Required metadata metav1.ListMeta false items []AnsibleEE true <p>Back to Custom Resources</p>"},{"location":"ansibleee/#ansibleeespec","title":"AnsibleEESpec","text":"<p>AnsibleEESpec defines the desired state of AnsibleEE</p> Field Description Scheme Required play Play is the playbook contents that ansible will run on execution. If both Play and Roles are specified, Play takes precedence string false playbook Playbook is the playbook that ansible will run on this execution string false image Image is the container image that will execute the ansible command string false args Args are the command plus the playbook executed by the image. If args is passed, Playbook is ignored. []string false name Name is the name of the internal container inside the pod string false env Env is a list containing the environment variables to pass to the pod []corev1.EnvVar false restartPolicy RestartPolicy is the policy applied to the Job on whether it needs to restart the Pod. It can be \\\"OnFailure\\\" or \\\"Never\\\". string false uid UID is the userid that will be used to run the container. int64 false inventory Inventory is the inventory that the ansible playbook will use to launch the job. string false extraMounts ExtraMounts containing conf files and credentials []storage.VolMounts true backoffLimit BackoffLimimt allows to define the maximum number of retried executions. *int32 false ttlSecondsAfterFinished TTLSecondsAfterFinished specified the number of seconds the job will be kept in Kubernetes after completion. *int32 false roles Role is the description of an Ansible Role If both Play and Role are specified, Play takes precedence Role false <p>Back to Custom Resources</p>"},{"location":"ansibleee/#ansibleeestatus","title":"AnsibleEEStatus","text":"<p>AnsibleEEStatus defines the observed state of AnsibleEE</p> Field Description Scheme Required nodes Nodes are the names of the ansibleee pods []string true <p>Back to Custom Resources</p>"},{"location":"ansibleee/#config","title":"Config","text":"<p>Config is a specification of where to mount a certain ConfigMap object</p> Field Description Scheme Required name Name is the name of the ConfigMap that we want to mount string true mountpath MountPoint is the directory of the container where the ConfigMap will be mounted string true <p>Back to Custom Resources</p>"},{"location":"ansibleee/#importrole","title":"ImportRole","text":"<p>ImportRole contains the actual rolename and tasks file name to execute</p> Field Description Scheme Required name string true tasks_from string true <p>Back to Custom Resources</p>"},{"location":"ansibleee/#role","title":"Role","text":"<p>Role describes the format of an ansible playbook destinated to run roles</p> Field Description Scheme Required name string false hosts string false strategy string false any_errors_fatal bool false become bool false tasks []Task true <p>Back to Custom Resources</p>"},{"location":"ansibleee/#task","title":"Task","text":"<p>Task describes a task centered exclusively in running import_role</p> Field Description Scheme Required name string true import_role ImportRole true tags []string false <p>Back to Custom Resources</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#testing","title":"Testing","text":"<p>The tests can be run with the following command: <pre><code>make test\n</code></pre></p>"},{"location":"contributing/#docs-testing","title":"Docs Testing","text":"<p>Cross-platform: <pre><code>pip install -r docs/doc_requirements.txt\n</code></pre></p> <p>Then: <pre><code>mkdocs serve\n</code></pre> Click the link it outputs. As you save changes to files modified in your editor, the browser will automatically show the new content.</p>"}]}